package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;


public class DifferentialDrivetrain extends SubsystemBase{

    private VictorSPX left1;
    private VictorSPX left2;
    private MotorControllerGroup leftMotor;
    private VictorSPX right1;
    private VictorSPX right2;
    private MotorControllerGroup rightMotor;
    private DifferentialDrive drive;
//  private Encoder leftencoder;
//  private Encoder rightencoder;


    public DifferentialDrivetrain(int __frontLeft__, int __frontRight__, int __backLeft__, int __backRight__) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        left1 = new VictorSPX(__frontLeft__);
        left2 = new VictorSPX(__backLeft__);
        right1 = new VictorSPX(__frontRight__);
        right2 = new VictorSPX(__backRight__);



        addChild("left1",left1);
        left1.setInverted(false);

        addChild("left2",left2);
        left2.setInverted(false);

        leftMotor = new MotorControllerGroup(left1, left2  );
        addChild("Left Motor",leftMotor);


 
        addChild("right1",right1);
        right1.setInverted(false);
        
        addChild("right2",right2);
        right2.setInverted(false);

        rightMotor = new MotorControllerGroup(right1, right2  );
        addChild("Right Motor",rightMotor);



        drive = new DifferentialDrive(leftMotor, rightMotor);
        addChild("Drive",drive);
        drive.setSafetyEnabled(true);
        drive.setExpiration(0.1);
        drive.setMaxOutput(1.0);

/*
        leftencoder = new Encoder(0, 1, false, EncodingType.k4X);
        addChild("left encoder",leftencoder);
        leftencoder.setDistancePerPulse(1.0);

        rightencoder = new Encoder(2, 3, false, EncodingType.k4X);
        addChild("right encoder",rightencoder);
        rightencoder.setDistancePerPulse(1.0);
*/

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void drive(double left, double right) {
        drive.tankDrive(left, right);
    }
}
